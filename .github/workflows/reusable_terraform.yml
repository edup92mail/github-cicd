name: module_terraform
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}
on:
  workflow_call:
    inputs:
      Path:
        required: true
        type: string
     # Runner:
     #   required: true
     #   type: string
      Environment:
        required: true
        type: string
      ExtraVars:
        required: true
        type: string
        default: "{}"
      AwsRole:
        required: true
        type: string
    outputs:
      TerraformOutput:
        value: ${{ jobs.job.outputs.TerraformOutput }}
        
jobs:
  job:
    runs-on: ${{ inputs.Runner }}
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.Path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Terraform Install
        uses: hashicorp/setup-terraform@v3

      - name: Extract Aws Config aws.yml
        run: echo "[$(yq eval -o=json ./env/aws.yml | jq -c '.')]" >> vars.json


      - name: Extract Aws Config aws.yml
        id: aws_config
        run: |
          echo "role=$(yq '.ENV_AWS_CONFIG.Role' ./env/aws.yml)" >> $GITHUB_OUTPUT
          echo "region=$(yq '.ENV_AWS_CONFIG.Region' ./env/aws.yml)" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.aws_config.outputs.role }}
          aws-region: ${{ steps.aws_config.outputs.region }}
        
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ID_CUENTA>:role/rol-con-web-identity
          aws-region: us-east-1
          
      - name: Get Backend data
        run:
        
      - name: Create backend TfVars
        run: |
          cat <<EOF > env_backend.tfvars
            region = "${{ inputs.INPUT_AWS_REGION }}"
            bucket = "${{ secrets.SECRET_BACKEND_BUCKET }}"
            key = "${{ secrets.SECRET_BACKEND_KEY }}"
          EOF
      - name: Create empty vars.json
        run: touch vars.json
      - name: Append Vars Common Yml > vars.json
        run: echo "[$(yq eval -o=json ./env/common.yml | jq -c '.')]" >> vars.json
      - name: Append Vars Environment Yml > vars.json
        run: echo "[$(yq eval -o=json ./env/${{ inputs.Environment }}.yml | jq -c '.')]" >> vars.json
      - name: Append Inputs.ExtraVars > vars.json.json
        run: echo '${{ inputs.EnvVars }}' >> vars.json
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfvars
      - name: Terraform Validate
        run: terraform validate -var-file=vars.json
      - name: Terraform Plan
        run: terraform validate -var-file=env_vars.json
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=env_vars.json
      - name: Terraform Output
        id: TerraformOutput
        run: JSON=$(terraform output -json | jq -c 'with_entries(.value = .value.value)') ; echo "TerraformOutput=$JSON" >> $GITHUB_OUTPUT
    env:
      TF_VAR_INPUT_AWS_REGION: ${{ inputs.INPUT_AWS_REGION }}
      TF_VAR_SECRET_AWS_KEY: ${{ secrets.SECRET_AWS_KEY }}
      TF_VAR_SECRET_AWS_SECRET: ${{ secrets.SECRET_AWS_SECRET }}
    outputs:
      TerraformOutput: ${{ steps.output.outputs.JSON}}
