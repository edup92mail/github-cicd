name: module_terraform
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}
on:
  workflow_call:
    inputs:
      Path:
        required: true
        type: string
      Runner:
        required: false
        type: string
        default: "ubuntu-latest"
      Environment:
        required: true
        type: string
      ExtraVars:
        required: false
        type: string
        default: "{}"
    outputs:
      TerraformOutput:
        value: ${{ jobs.job.outputs.TerraformOutput }}
        
jobs:
  TerraformPlan:
    runs-on: ${{ inputs.Runner }}
    permissions:
      id-token: write
      contents: read 
    defaults:
      run:
        working-directory: ${{ inputs.Path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Terraform Install
        uses: hashicorp/setup-terraform@v3
      - name: Required Files check
        run: |
          environment=$(echo "${{ inputs.Environment }}" | tr '[:upper:]' '[:lower:]')
          terraform_files=("main.tf" "backend.tf" "providers.tf" "data.tf" "variables.tf" "outputs.tf")
          config_files=("./config/aws.yml" "./config/product.yml" "./config/env/$environment.yml")
          for file in "${terraform_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required Terraform file not found: $file"
              exit 1
            fi
          done
          for file in "${config_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required config file not found: $file"
              exit 1
            fi
          done
          echo "All minimium Files files exists"
      - name: Extract ./config/aws.yml
        id: LoadAwsYml
        run: |
          echo "CiCdRoleArn=$(yq '.CiCdRoleArn' ./config/aws.yml)" >> $GITHUB_OUTPUT
          echo "BackendBucket=$(yq '.BackendBucket' ./config/aws.yml)" >> $GITHUB_OUTPUT
          echo "Region=$(yq '.Region' ./config/aws.yml)" >> $GITHUB_OUTPUT
          if [ -z "$CiCdRoleArn" ] || [ "$CiCdRoleArn" = "null" ] || \
            [ -z "$BackendBucket" ] || [ "$BackendBucket" = "null" ] || \
            [ -z "$Region" ] || [ "$Region" = "null" ]; then
            echo "❌ echo "Required Aws Variable in ./config/aws.yml not found"
            exit 1
          fi
      - name: Extract ./config/product.yml
        id: LoadProductYml
        run: |
          echo "Product=$(yq '.Product' ./config/product.yml)" >> $GITHUB_OUTPUT
          if [ -z "$product" ] || [ "$product" = "null" ]; then
            echo "Required Product Name Variable not found"
            exit 1
          fi
      - name: Product and Environment Style Check
        run: |
          if ! [[ "${{ steps.LoadProductYml.outputs.Product }}" =~ ^[A-Z] ]]; then
            echo "Error: Product debe comenzar con una letra mayúscula (A-Z)."
            exit 1
          fi
          if [[ "${{ inputs.Environment }}" != "Prod" && "${{ inputs.Environment }}" != "Dev" ]]; then
            echo "Invalid Environment: ${{ inputs.Environment }}"
            exit 1
          fi
      - name: Extract ./config/sshkeys/*
        id: LoadSshKeys
        run: |
          count=0
          key_block=""
          for keyfile in ./config/sshkeys/*.pem; do
            [ -e "$keyfile" ] || continue
            echo "Cargando clave: $keyfile"
            key_block="${key_block}$(cat "$keyfile")"$'\n'
            count=$((count + 1))
          done
          echo "ssh_key_count=$count" >> $GITHUB_OUTPUT
          if [ "$count" -gt 0 ]; then
            echo "ALL_SSH_KEYS<<EOF" >> $GITHUB_ENV
            echo "$key_block" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
      - name: Load ./config/sshkeys/* in Runner if exists
        if: steps.LoadSshKeys.outputs.ssh_key_count != '0'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.ALL_SSH_KEYS }}
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.LoadAwsYml.outputs.CiCdRoleArn }}
          aws-region: ${{ steps.LoadAwsYml.outputs.Region }}
      - name: Create backend TfVars
        run: |
          cat <<EOF > backend.tfbackend
            bucket = "${{ steps.LoadAwsYml.outputs.BackendBucket }}"
            key = "{{ steps.LoadAwsYml.outputs.Product }}-${{ inputs.Environment}}.tfstate"
            region = "${{ steps.LoadAwsYml.outputs.Region }}"
          EOF
      - name: Create empty vars.json
        run: echo "{}" > vars.json
      - name: Append Vars Environment Yml > vars.json
        run: jq -s '.[0] * .[1]' vars.json <(yq eval -o=json ./config/env/$(echo "${{ inputs.Environment }}" | tr '[:upper:]' '[:lower:]').yml) > tmp.json && mv tmp.json vars.json
      - name: Append Inputs.ExtraVars > vars.json.json
        run: jq -s '.[0] * .[1]' vars.json <(echo '${{ inputs.ExtraVars }}') > tmp.json && mv tmp.json vars.json
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfbackend
      - name: Terraform Validate
        run: terraform validate -var-file=vars.json
      - name: Terraform Plan
        run: terraform validate -var-file=env_vars.json
    #  - name: Terraform Apply
    #    run: terraform apply -auto-approve -var-file=env_vars.json
    #  - name: Terraform Output
   #     id: TerraformOutput
   #     run: JSON=$(terraform output -json | jq -c 'with_entries(.value = .value.value)') ; echo "TerraformOutput=$JSON" >> $GITHUB_OUTPUT
    outputs:
      TerraformOutput: ${{ steps.output.outputs.JSON}}
