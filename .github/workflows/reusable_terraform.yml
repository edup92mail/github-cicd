name: module_terraform
on:
  workflow_call:
    inputs:
      Path:
        required: true
        type: string
      Runner:
        required: false
        type: string
        default: "ubuntu-latest"
      Environment:
        required: true
        type: string
      ExtraVars:
        required: false
        type: string
        default: "{}"
    outputs:
      TerraformOutput:
        value: ${{ jobs.job.outputs.TerraformOutput }}
        
jobs:
  Terraform:
    runs-on: ${{ inputs.Runner }}
    permissions:
      id-token: write
      contents: read 
      issues: write
    defaults:
      run:
        working-directory: ${{ inputs.Path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Terraform Install
        uses: hashicorp/setup-terraform@v3
      - name: Required Files check
        run: |
          environment=$(echo "${{ inputs.Environment }}" | tr '[:upper:]' '[:lower:]')
          terraform_files=("main.tf" "backend.tf" "providers.tf" "data.tf" "variables.tf" "outputs.tf")
          config_files=("./config/deploy.yml" "./config/product.yml" "./config/env/$environment.yml")
          for file in "${terraform_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required Terraform file not found: $file"
              exit 1
            fi
          done
          for file in "${config_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required config file not found: $file"
              exit 1
            fi
          done
          echo "‚úÖ All minimium Files files exists"
      - name: Product and Environment Style Check
        run: |
          product=$(yq e '.Product' ./config/product.yml)
          if ! [[ "$product" =~ ^[A-Z] ]]; then
            echo "‚ùå Product debe comenzar con una letra may√∫scula (A-Z). (Found: '$product')"
            exit 1
          fi
          if [[ "${{ inputs.Environment }}" != "Prod" && "${{ inputs.Environment }}" != "Dev" ]]; then
            echo "‚ùå Invalid Environment: ${{ inputs.Environment }}"
            exit 1
          fi
          echo "‚úÖ Product '$product' y Environment '$env' v√°lidos"
      - name: Check ./config/product.yml
        run: |
          check_key() {
            local key="$1"
            if grep -qE "^[[:space:]]*${key}:" "./config/product.yml"; then
              echo "‚úÖ La clave '$key' existe"
            else
              echo "‚ùå ERROR: Falta la clave '$key'" >&2
              exit 1
            fi
          }

          # Comprobar cada clave
          for key in Product Network Ec2; do
            check_key "$key"
          done
      - name: Extract ./config/deploy.yml
        id: LoadDeployYml
        run: |
          f=./config/deploy.yml
      
          # Valores individuales
          for var in DeployCiCdRoleArn BackendBucket Region; do
            val=$(yq e -r ".${var}" "$f")
            [[ -n "$val" && "$val" != "null" ]] || { echo "‚ùå Required $var not found"; exit 1; }
            echo "${var}=$val" >> $GITHUB_OUTPUT
          done
      
          # DeployKeys (multil√≠nea)
          keys=$(yq e -r '.DeployKeys[]' "$f")
          [[ -n "$keys" && "$keys" != "null" ]] || { echo "‚ùå Required DeployKeys not found"; exit 1; }
          {
            echo "DeployKeys<<EOF"
            printf '%s\n' "$keys"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      
          echo "‚úÖ All required deploy variables exist"
      - name: KeyPairs Check
        run: |
          f=./config/product.yml; p='.Ec2.KeyPairs'
          # Asegura que haya al menos una KeyPair
          (( $(yq e "$p|length" $f) )) || { echo "‚ùå No se encontr√≥ ninguna KeyPair"; exit 1; }
          # Para cada clave, decodifica base64 y p√°sala a ssh-keygen
          for k in $(yq e "$p|keys|.[]" $f); do
            echo "üîç $k"
            ssh-keygen -l -f <(yq e "$p.\"$k\"" $f | base64 -d) \
              && echo "‚úîÔ∏è $k OK" || { echo "üö´ $k ERROR"; exit 1; }
          done
          echo "‚úÖ Todas las KeyPairs v√°lidas"
      - name: Load DeployKeys from ./config/deploy.yml
        id: LoadDeployKeys
        run: |
          # Cuenta cu√°ntas DeployKeys hay
          c=$(yq e '.DeployKeys|length' ./config/deploy.yml)
          echo "ssh_key_count=$c" >> $GITHUB_OUTPUT

          # Si hay al menos una, decodifica todo de golpe
          if (( c > 0 )); then
            data=$(yq e -r '.DeployKeys[]' ./config/deploy.yml | base64 -d)

            # Enmascara y exporta
            echo "::add-mask::$data"
            {
              echo "ALL_SSH_KEYS<<EOF"
              printf '%s\n' "$data"
              echo "EOF"
            } >> $GITHUB_ENV

            echo "‚úÖ $c claves SSH cargadas"
          else
            echo "‚ö†Ô∏è No se encontraron DeployKeys"
          fi
      - name: Load DeployKeys in Runner if exists
        if: steps.LoadDeployKeys.outputs.ssh_key_count != '0'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.ALL_SSH_KEYS }}
      - name: Create backend Tfbackend
        run: |
          cat <<EOF > backend.tfbackend
            bucket = "${{ steps.LoadAwsYml.outputs.BackendBucket }}"
            key = "{{ steps.LoadAwsYml.outputs.Product }}-${{ inputs.Environment}}.tfstate"
            region = "${{ steps.LoadAwsYml.outputs.Region }}"
          EOF
      - name: Create empty vars.json
        run: echo "{}" > vars.json
      - name: Append ./config/env/product.yml ‚Üí vars.json
        run: |
          product_file="./config/env/product.yml"
          # Leer YAML como JSON
          json=$(yq -o=json "$product_file")
      
          # Contar keys solo si es un objeto
          added_count=$(printf '%s' "$json" | jq 'if type=="object" then keys | length else 0 end')
      
          # Fusionar con vars.json (si viene null, lo tratamos como {})
          jq -s '.[0] * (.[1] // {})' vars.json <(printf '%s' "$json") > tmp.json \
            && mv tmp.json vars.json
      
          echo "‚úÖ $added_count variables added from $product_file to vars.json"
      - name: Append Environment String > vars.json
        run: |
          jq --arg env "${{ inputs.Environment }}" \
            '.Environment = $env' \
            vars.json > vars.json.tmp && mv vars.json.tmp vars.json
          echo "‚úÖ Environment \"${{ inputs.Environment }}\" added to vars.json"
      - name: Append environment variables > vars.json
        run: |
          env_file="./config/env/$(echo "${{ inputs.Environment }}" | tr '[:upper:]' '[:lower:]').yml"
          added_count=$(yq -o=json "$env_file" | jq 'keys | length')
          jq -s '.[0] * .[1]' vars.json <(yq -o=json "$env_file") > tmp.json && mv tmp.json vars.json
          echo "‚úÖ $added_count variables added from $env_file to vars.json"
      - name: Append inputs.ExtraVars > vars.json
        run: |
          extra_vars='${{ inputs.ExtraVars }}'
          added_count=$(echo "$extra_vars" | jq 'keys | length')
          jq -s '.[0] * .[1]' vars.json <(echo "$extra_vars") > tmp.json && mv tmp.json vars.json
          echo "‚úÖ $added_count variables added from inputs.ExtraVars to vars.json"
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.LoadAwsYml.outputs.CiCdRoleArn }}
          aws-region: ${{ steps.LoadAwsYml.outputs.Region }}
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfbackend
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        id: TerraformPlan
        run: terraform plan -var-file=vars.json -no-color
        timeout-minutes: 1
      - name: Manual Workflow Approval
        uses: trstringer/manual-approval@v1.9.1
        timeout-minutes: 5
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          issue-title: "Terraform Apply to Product ${{ steps.LoadProductYml.outputs.Product }} in Env ${{ inputs.Environment }}"
          issue-body: |
            Plan output:

            ```
            ${{ steps.TerraformPlan.outputs.stdout }} 
            
            ```
          additional-approved-words: 'allow'
          additional-denied-words: 'deny'
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=vars.json
      - name: Terraform Output
        id: TerraformOutput
        run: JSON=$(terraform output -json | jq -c 'with_entries(.value = .value.value)') ; echo "TerraformOutput=$JSON" >> $GITHUB_OUTPUT
    outputs:
      TerraformOutput: ${{ steps.output.outputs.JSON}}
