name: module_terraform
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}
on:
  workflow_call:
    inputs:
      Path:
        required: true
        type: string
      Runner:
        required: true
        type: string
      EnvYml:
        required: true
        type: string
      AwsRole:
        required: true
        type: string

      VARS:
        required: true
        type: string
    secrets:
      SECRET_AWS_KEY:
        required: true
      SECRET_AWS_SECRET:
        required: true
      SECRET_BACKEND_BUCKET:
        required: true
      SECRET_BACKEND_KEY:
        required: true
      SECRET_BACKEND_TABLE:
        required: true
    outputs:
      JSON:
        value: ${{ jobs.job.outputs.JSON }}
        
jobs:
  job:
    runs-on: ${{ inputs.Runner  }}
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.Path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Terraform Install
        uses: hashicorp/setup-terraform@v3
      - name: Create backend TfVars
        run: |
          cat <<EOF > env_backend.tfvars
            region = "${{ inputs.INPUT_AWS_REGION }}"
            bucket = "${{ secrets.SECRET_BACKEND_BUCKET }}"
            key = "${{ secrets.SECRET_BACKEND_KEY }}"
          EOF
      - name: Create empty env_vars.json
        run: touch env_vars.json
      - name: Append Env Yml > env_vars.json
        run: echo "[$(yq eval -o=json "${{ inputs.EnvYml }}" | jq -c '.')]" > env_vars.json
      - name: Append Inputs.Vars > env_vars.json
        run: echo '${{ inputs.VARS }}' >> env_vars.json
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfvars
      - name: Terraform Validate
        run: terraform validate -var-file=env_vars.json
      - name: Terraform Plan
        run: terraform validate -var-file=env_vars.json
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=env_vars.json
      - name: Terraform Output
        id: output
        run: OUTPUT=$(terraform output -json | jq -c 'with_entries(.value = .value.value)') ; echo "JSON=$OUTPUT" >> $GITHUB_OUTPUT
    env:
      TF_VAR_INPUT_AWS_REGION: ${{ inputs.INPUT_AWS_REGION }}
      TF_VAR_SECRET_AWS_KEY: ${{ secrets.SECRET_AWS_KEY }}
      TF_VAR_SECRET_AWS_SECRET: ${{ secrets.SECRET_AWS_SECRET }}
    outputs:
      JSON: ${{ steps.output.outputs.JSON}}
