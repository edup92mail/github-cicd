name: module_terraform
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}
on:
  workflow_call:
    inputs:
      Path:
        required: true
        type: string
      Runner:
        required: false
        type: string
        default: "ubuntu-latest"
      Environment:
        required: true
        type: string
      ExtraVars:
        required: false
        type: string
        default: "{}"
    outputs:
      TerraformOutput:
        value: ${{ jobs.job.outputs.TerraformOutput }}
        
jobs:
  TerraformPlan:
    runs-on: ${{ inputs.Runner }}
    permissions:
      id-token: write
      contents: read 
    defaults:
      run:
        working-directory: ${{ inputs.Path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.SSHKEY_GIT }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
      - name: test
        run: ssh -T git@github.com -i ~/.ssh/id_rsa
      - name: Terraform files check
        run: |
          for file in main.tf backend.tf providers.tf data.tf variables.tf outputs.tf; do
            if [ ! -f "$file" ]; then
              echo "Error: Required Terraform File not found: $file"
              exit 1
            fi
          done
          echo "All minimium Terraform files exists"
      - name: Config.Yml Check
        run: |
          if [ ! -f "vars/config.yml" ]; then
            echo "vars/config.yml not found"
            exit 1
          fi
      - name: Environment Check
        run: |
          if [[ "${{ inputs.Environment }}" != "Prod" && "${{ inputs.Environment }}" != "Dev" ]]; then
            echo "Invalid Environment: ${{ inputs.Environment }}"
            exit 1
          fi
          
          environment=$(echo "${{ inputs.Environment }}" | tr '[:upper:]' '[:lower:]')
          if [ ! -f "vars/${environment}.yml" ]; then
            echo "vars/${environment}.yml not found"
            exit 1
          fi
      - name: Terraform Install
        uses: hashicorp/setup-terraform@v3
      - name: Extract config.yml
        id: ConfigYml
        run: |
          echo "CiCdRoleArn=$(yq '.CiCdRoleArn' ./vars/config.yml)" >> $GITHUB_OUTPUT
          echo "BackendBucket=$(yq '.BackendBucket' ./vars/config.yml)" >> $GITHUB_OUTPUT
          echo "Region=$(yq '.Region' ./vars/config.yml)" >> $GITHUB_OUTPUT
          echo "Product=$(yq '.Product' ./vars/config.yml)" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.ConfigYml.outputs.CiCdRoleArn }}
          aws-region: ${{ steps.ConfigYml.outputs.Region }}
      - name: Create backend TfVars
        run: |
          cat <<EOF > backend.tfbackend
            bucket = "${{ steps.ConfigYml.outputs.BackendBucket }}"
            key = "{{ steps.ConfigYml.outputs.Product }}-${{ inputs.Environment}}.tfstate"
            region = "${{ steps.ConfigYml.outputs.Region }}"
          EOF
      - name: Create empty vars.json
        run: echo "{}" > vars.json
      - name: Append Vars Environment Yml > vars.json
        run: jq -s '.[0] * .[1]' vars.json <(yq eval -o=json ./vars/$(echo "${{ inputs.Environment }}" | tr '[:upper:]' '[:lower:]').yml) > tmp.json && mv tmp.json vars.json
      - name: Append Inputs.ExtraVars > vars.json.json
        run: jq -s '.[0] * .[1]' vars.json <(echo '${{ inputs.ExtraVars }}') > tmp.json && mv tmp.json vars.json
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfbackend
      - name: Terraform Validate
        run: terraform validate -var-file=vars.json
      - name: Terraform Plan
        run: terraform validate -var-file=env_vars.json
    #  - name: Terraform Apply
    #    run: terraform apply -auto-approve -var-file=env_vars.json
    #  - name: Terraform Output
   #     id: TerraformOutput
   #     run: JSON=$(terraform output -json | jq -c 'with_entries(.value = .value.value)') ; echo "TerraformOutput=$JSON" >> $GITHUB_OUTPUT
    env:
      TF_VAR_INPUT_AWS_REGION: ${{ inputs.INPUT_AWS_REGION }}
      TF_VAR_SECRET_AWS_KEY: ${{ secrets.SECRET_AWS_KEY }}
      TF_VAR_SECRET_AWS_SECRET: ${{ secrets.SECRET_AWS_SECRET }}
    outputs:
      TerraformOutput: ${{ steps.output.outputs.JSON}}
