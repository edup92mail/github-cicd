name: module_terraform
run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}
on:
  workflow_call:
    inputs:
      Path:
        required: true
        type: string
      Runner:
        required: false
        type: string
        default: "ubuntu-latest"
      Product:
        required: true
        type: string
      Environment:
        required: false
        type: string
      ExtraVars:
        required: false
        type: string
        default: "{}"
    outputs:
      TerraformOutput:
        value: ${{ jobs.job.outputs.TerraformOutput }}
        
jobs:
  TerraformPlan:
    runs-on: ${{ inputs.Runner }}
    permissions:
      id-token: write
      contents: read 
    defaults:
      run:
        working-directory: ${{ inputs.Path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Env Check
        run: echo "comprobar que el env existe"
      - name: Terraform Install
        uses: hashicorp/setup-terraform@v3
      - name: Extract Env > env.yml
        id: env
        run: |
          echo "CiCdRoleArn=$(yq '.CiCdRoleArn' ./vars/env.yml)" >> $GITHUB_OUTPUT
          echo "BackendBucket=$(yq '.BackendBucket' ./vars/env.yml)" >> $GITHUB_OUTPUT
          echo "Region=$(yq '.Region' ./vars/env.yml)" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.env.outputs.CiCdRoleArn }}
          aws-region: ${{ steps.env.outputs.Region }}
      - name: Create backend TfVars
        run: |
          cat <<EOF > backend.tfvars
            bucket = "${{ steps.env.outputs.BackendBucket }}"
            key = "${{ inputs.Product}}-${{ inputs.Environment}}-state.tfstate"
          EOF
      - name: Create empty vars.json
        run: echo "[]" > vars.json
      - name: Append Vars Common Yml > vars.json
        run: yq eval -o=json ./env/common.yml | jq -s '.[0]' > vars.json
      - name: Append Vars Environment Yml > vars.json
        run: jq -s '.[0] * .[1]' vars.json <(yq eval -o=json ./env/$(echo "${{ inputs.Environment }}" | tr '[:upper:]' '[:lower:]').yml) > tmp.json && mv tmp.json vars.json
      - name: Append Inputs.ExtraVars > vars.json.json
        run: jq -s '.[0] * .[1]' vars.json <(echo '${{ inputs.ExtraVars }}') > tmp.json && mv tmp.json vars.json
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfvars
      - name: Terraform Validate
        run: terraform validate -var-file=vars.json
      - name: Terraform Plan
        run: terraform validate -var-file=env_vars.json
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=env_vars.json
      - name: Terraform Output
        id: TerraformOutput
        run: JSON=$(terraform output -json | jq -c 'with_entries(.value = .value.value)') ; echo "TerraformOutput=$JSON" >> $GITHUB_OUTPUT
    env:
      TF_VAR_INPUT_AWS_REGION: ${{ inputs.INPUT_AWS_REGION }}
      TF_VAR_SECRET_AWS_KEY: ${{ secrets.SECRET_AWS_KEY }}
      TF_VAR_SECRET_AWS_SECRET: ${{ secrets.SECRET_AWS_SECRET }}
    outputs:
      TerraformOutput: ${{ steps.output.outputs.JSON}}
